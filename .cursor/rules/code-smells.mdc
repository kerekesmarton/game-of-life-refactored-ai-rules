---
alwaysApply: false
---

# Code Smells Detection

## High Priority Smells (Fix Immediately)

### Duplicated Code
- **Description**: Identical or very similar code exists in multiple locations
- **Violations**: DRY violation, Cohesion violation
- **Fix**: Extract common functionality into shared methods/classes

### Long Method
- **Description**: Methods that do more than one thing
- **Target**: < 15 lines per method, one level of abstraction
- **Violations**: SRP violation, Cohesion violation
- **Fix**: Extract smaller, focused methods

### Large Class
- **Description**: Classes with too many responsibilities
- **Target**: < 50 lines per class, single responsibility
- **Violations**: SRP violation, Cohesion violation
- **Fix**: Extract classes when responsibilities diverge

### Primitive Obsession
- **Description**: Using primitive types instead of meaningful classes
- **Violations**: Coupling violation, Connascence of meaning
- **Fix**: Wrap primitives in domain classes (e.g., Cell class)

## Medium Priority Smells (Address Soon)

### Long Parameter List
- **Guidelines**: 
  - 0 (niladic) = Ideal
  - 1 (monadic) = OK
  - 2 (dyadic) = Acceptable
  - 3 (triadic) = Debatable (avoid if possible)
  - 3+ (polyadic) = Only with special justification
- **Violations**: Coupling violation, Connascence of position
- **Fix**: Use objects or reduce parameters

### Feature Envy
- **Description**: Class uses methods/properties of another class excessively
- **Violations**: "Tell, don't ask" violation, Cohesion and Coupling violation
- **Fix**: Move behavior to the class that owns the data

### Data Clumps
- **Description**: Same data items together in multiple places
- **Violations**: DRY violation, Cohesion violation
- **Fix**: Group related data into objects

### Switch Statements
- **Description**: Same switch statement scattered in different places
- **Violations**: DRY violation, Cohesion violation
- **Fix**: Consider polymorphism or strategy pattern

## Lower Priority Smells (Monitor and Address)

### Divergent Change
- **Description**: One class changed in different ways for different reasons (God class)
- **Violations**: OCP, SRP violation, Cohesion violation
- **Fix**: Split into multiple classes with single responsibilities

### Shotgun Surgery
- **Description**: One change forces many small changes across classes
- **Violations**: DRY violation, Coupling violation
- **Fix**: Consolidate related functionality

### Message Chains
- **Description**: Too many dots: `Dog.Body.Tail.Wag()`
- **Fix**: `Dog.ExpressHappiness()`
- **Violations**: Law of Demeter violation, Coupling violation

### Data Class
- **Description**: Classes with only fields, no behavior (Anaemic classes)
- **Violations**: Cohesion violation
- **Fix**: Add behavior or eliminate the class

### Speculative Generality
- **Description**: Unused classes, methods, fields, or parameters
- **Violations**: YAGNI violation, Cohesion violation
- **Fix**: Remove unused code immediately

### Dead Code
- **Description**: Code with no references, commented code
- **Fix**: Delete immediately - "Deleted code has no bugs and improves readability"

### Comments
- **Description**: Comments explaining what code does
- **Violations**: KISS violation
- **Fix**: Create self-documenting code instead

## Advanced Smells (Monitor for Patterns)

### Middle Man
- **Description**: Class delegating all its work
- **Violations**: Cohesion violation
- **Fix**: Cut out the middleman or add real behavior

### Inappropriate Intimacy
- **Description**: Dependencies on implementation details of another class
- **Violations**: Cohesion violation
- **Fix**: Reduce coupling through proper interfaces

### Alternative Classes with Different Interfaces
- **Description**: Similar classes with different interfaces
- **Fix**: Create common interface or merge classes

### Refused Bequest
- **Description**: Subclass using only some inherited methods
- **Violations**: LSP violation
- **Fix**: Use composition instead of inheritance

## Smell Detection Strategy
1. **Regular Reviews**: Look for these patterns during code reviews
2. **Refactoring Triggers**: Address smells when touching related code
3. **Test Coverage**: Ensure tests exist before refactoring
4. **Incremental Improvement**: Fix smells gradually, not all at once
5. **Measure Impact**: Ensure refactoring improves maintainability
